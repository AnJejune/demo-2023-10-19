# 각 자리 숫자의 합 구하기 - 11720
# n = "700000000000"
# numbers = list(n)
# total = 0 

# for i in numbers:
#     total += int(i)
# print(total)

# 평균 구하기 - 1546
# n = "20, 30, 40, 50"
# myList = list(map(int, n.split(",")))
# myMax = max(myList)
# mySum = sum(myList)
# print(mySum * 100 / myMax / len(myList))

# 구간 합 구하기 - 11659
# import sys
# input = sys.stdin.readline
# suNo, quizNo = map(int, input().split())
# number = list(map(int, input().split()))
# prefix_sum = [0]
# temp = 0

# for i in number:
#     temp = temp + i
#     prefix_sum.append(temp)

# for i in range(quizNo):
#     s, e = map(int, input().split())
#     print(prefix_sum[e] - prefix_sum[s-1])

# 구간 합 구하기 2 - 11660
# import sys
# input = sys.stdin.readline
# n, m = map(int, input().split())
# A = [[0]*(n+1)]
# D = [[0]*(n+1) for _ in range(n+1)]

# for i in range(1, n+1):
#     A_row = [0] + [int(x) for x in input().split()]
#     A.append(A_row)
# for i in range(1, n+1):
#     for j in range(1, n+1):
#         D[i][j] = D[i][j-1] + D[i-1][j-1] + A[i][j]
# for _ in range(m):
#     x1,y1,x2,y2 = map(int, input().split())
#     result = D[x2][y2] - D[x1-1][y2] - D[x2][y1-1] + D[x1-1][y1-1]
#     print(result)

# 나머지 합 구하기 (연속된 부분의 합이 M으로 나누어 떨어지는 구간의 개수) - 10986
# import sys
# input = sys.stdin.readline
# n,m = map(int, input().split())
# A = list(map(int, input().split()))
# S = [0]*n
# C = [0]*m
# S[0] = A[0]
# answer = 0

# for i in range(1, n):
#     S[i] = S[i-1] + A[i]
# for i in range(n):
#     remainder = S[i] % m
#     if remainder  == 0:
#         answer += 1
#     C[remainder] += 1
# for i in range(m):
#     if C[i] > 1:
#         answer += (C[i] * (C[i] - 1) // 2)
# print(answer)

# 연속된 자연수의 합 구하기 - 2018
# n = int(input())
# count = 1 # N값을 바로 뽑는 경우
# start_index = 1
# end_index = 1
# sum = 1

# while end_index != n:
#     if sum == n:
#         count += 1
#         end_index += 1
#         sum += end_index
#     elif sum > n:
#         sum -= start_index
#         start_index += 1
#     else:
#         end_index += 1
#         sum += end_index

# 주몽의 명령 - 1940
# import sys
# input = sys.stdin.readline
# N = int(input())
# M = int(input())
# A = list(map(int, input().split()))
# count = 0
# start_index = 0
# end_index = N-1

# A.sort()
# while(start_index < end_index):
#     if A[start_index] + A[end_index] < M:
#         start_index += 1
#     elif A[start_index] + A[end_index] > M:
#         end_index -= 1
#     else:
#         count += 1
#         start_index += 1
#         end_index -= 1
# print(count)

# 좋은 수 구하기 - 주어진 N개의 수에서 다른 두 수의 합으로 표현되는 수가 있다면 그 수를 '좋은 수'라고 한다. - 1253
# import sys
# input = sys.stdin.readline
# N = int(input())
# A = list(map(int, input().split()))
# Result = 0

# A.sort()
# for k in range(N):
#     find = A[k]
#     start_index = 0
#     end_index = N-1
#     while start_index < end_index:
#         if A[start_index] + A[end_index] < find:
#             start_index += 1
#         elif A[start_index] + A[end_index] > find:
#             end_index -= 1
#         else:
#             if start_index != k and end_index != k:
#                 Result += 1
#                 break
#             elif start_index == k:
#                 start_index += 1
#             elif end_index == k:
#                 end_index -= 1
# print(Result)

# DNA 비밀번호 - 12891
# checkList = [0] * 4
# myList = [0] * 4
# checkSecret = 0
# def myadd(c):
#     global checkList, myList, checkSecret
#     if c == 'A':
#         myList[0] += 1
#         if myList[0] == checkList[0]:
#             checkSecret += 1
#     elif c == 'C':
#         myList[1] += 1
#         if myList[1] == checkList[1]:
#             checkSecret += 1
#     elif c == 'G':
#         myList[2] += 1
#         if myList[2] == checkList[2]:
#             checkSecret += 1
#     elif c == 'T':
#         myList[3] += 1
#         if myList[3] == checkList[3]:
#             checkSecret += 1
# def myremove(c):
#     global checkList, myList, checkSecret
#     if c == 'A':
#         myList[0] -= 1
#         if myList[0] == checkList[0]:
#             checkSecret -= 1
#     elif c == 'C':
#         myList[1] -= 1
#         if myList[1] == checkList[1]:
#             checkSecret -= 1
#     elif c == 'G':
#         myList[2] -= 1
#         if myList[2] == checkList[2]:
#             checkSecret -= 1
#     elif c == 'T':
#         myList[3] -= 1
#         if myList[3] == checkList[3]:
#             checkSecret -= 1
        
# S, P = map(int, input().split)
# Result = 0
# A = list(input())
# checkList = list(map(int, input().split()))

# for i in range(4):
#     if checkList[i] == 0:
#         checkSecret += 1

# for i in range(P):
#     myadd(A[i])

# if checkSecret == 4:
#     Result += 1

# for i in range(P,S):
#     j = i - P
#     myadd(A[i])
#     myremove(A[j])
#     if checkSecret == 4:
#         Result += 1

# print(Result)

# 최솟값 찾기 1
# from collections import deque
# N,L = map(int,input().split())
# mydeque = deque()
# now = list(map(int,input().split())) 

# # 새로운 값이 들어올 때마다 정렬 대신 현재 수 보다 큰 값을 덱에서 제거해 시간 복잡도를 줄임
# for i in range(N):
#     while mydeque and mydeque[-1][0] > now[i]:
#         mydeque.pop()
#     mydeque.append((now[i], i))
#     if mydeque[0][1] <= i-L:
#         mydeque.popleft()
#     print(mydeque[0][0], end = ' ')
# # 이 문제의 핵심 -> 정렬 알고리즘을 사용하지 않고도 슬라이딩 윈도우와 덱을 이용해 정렬 효과를 보는 것입니다.

# 스택으로 수열 만들기
# N = int(input())
# A = [0]*N

# for i in range(N):
#     A[i] = int(input())
# stack = []
# num = 1
# result = True
# answer = ""

# for i in range(N):
#     su = A[i]
#     if su >= num: # 현재 수열값 >= 오름차순 자연수 : 값이 같아질 때까지 append() 수행
#         while su >= num:
#             stack.append(num)
#             num += 1
#             answer += "+\n"
#         stack.pop()
#         answer += "-\n"
#     else: # 현재 수열값 < 오름차순 자연수: pop()을 수행해 수열 원소를 꺼냄
#         n = stack.pop()
#         # 스택 가장 위의 수가 만들어야 하는 수보다 크면 수열을 출력할 수 없음
#         if n > su:
#             print("NO")
#             result = False
#             break
#         else:
#             answer += '-\n'
# if result:
#     print(answer)

# 오큰수 -> A_i의 오른쪽에 있으면서 A_i 보다 큰 수 중 가장 왼쪽에 있는 수
# n = int(input())
# ans = [0] * n
# A = list(map(int,input().split()))
# myStack = []
# for i in range(n):
#     # 스택이 비어 있지 않고 현재 수열이 스택 top 인덱스가 가르키는 수열보다 클 경우
#     while myStack and A[myStack[-1]] < A[i]:
#         ans[myStack.pop()] = A[i]
#     myStack.append(i)

# while myStack: # 반복 for문을 다 돌고 나왔는데 스택이 비어 있지 않다면 빌 때까지
#     ans[myStack.pop()] = -1 # 스택에 쌓인 index에 -1을 넣기
# result = ""

# for i in range(n):
#     result += str(ans[i]) + " "
# print(result)

# 카드 게임
# from collections import deque

# N = int(input())
# myQueue = deque()

# for i in range(1, N+1):
#     myQueue.append(i)

# while len(myQueue) > 1: # 카드가 1장 남을 때까지
#     myQueue.popleft() # 맨 위의 카드를 버림 
#     myQueue.append(myQueue.popleft()) # 맨 위의 카드를 가장 아래 카드 밑으로 이동
# print(myQueue[0]) # 마지막 남은 카드 출력

# 절대값 힙 구현하기
# from queue import PriorityQueue
# import sys
# print = sys.stdout.write
# input = sys.stdin.readline
# N = int(input())
# myQueue = PriorityQueue()

# for i in range(N):
#     request = int(input())
#     if request == 0:
#         if myQueue.empty():
#             print("0\n")
#         else:
#             temp = myQueue.get()
#             print(str((temp[1]))+'\n') 
#     else:
#         # 절댓값을 기준으로 정렬하고 같으면 음수 우선 정렬하도록 구성
#         myQueue.put((abs(request), request))
